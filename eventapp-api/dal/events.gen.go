// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"example/eventapi/model"
)

func newEvent(db *gorm.DB, opts ...gen.DOOption) event {
	_event := event{}

	_event.eventDo.UseDB(db, opts...)
	_event.eventDo.UseModel(&model.Event{})

	tableName := _event.eventDo.TableName()
	_event.ALL = field.NewAsterisk(tableName)
	_event.ID = field.NewField(tableName, "id")
	_event.CreatedAt = field.NewTime(tableName, "created_at")
	_event.UpdatedAt = field.NewTime(tableName, "updated_at")
	_event.DeletedAt = field.NewField(tableName, "deleted_at")
	_event.Name = field.NewString(tableName, "name")
	_event.Description = field.NewString(tableName, "description")
	_event.Location = field.NewString(tableName, "location")
	_event.StartsAt = field.NewTime(tableName, "starts_at")
	_event.EndsAt = field.NewTime(tableName, "ends_at")
	_event.ParticipantLimit = field.NewInt64(tableName, "participant_limit")
	_event.ParticipationStartsAt = field.NewTime(tableName, "participation_starts_at")
	_event.ParticipationEndsAt = field.NewTime(tableName, "participation_ends_at")
	_event.Visibility = field.NewString(tableName, "visibility")
	_event.AdminCode = field.NewString(tableName, "admin_code")
	_event.ExpiresAt = field.NewTime(tableName, "expires_at")
	_event.ParticipantCount = field.NewInt64(tableName, "participant_count")
	_event.Participations = eventHasManyParticipations{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Participations", "model.Participation"),
	}

	_event.fillFieldMap()

	return _event
}

type event struct {
	eventDo eventDo

	ALL                   field.Asterisk
	ID                    field.Field
	CreatedAt             field.Time
	UpdatedAt             field.Time
	DeletedAt             field.Field
	Name                  field.String
	Description           field.String
	Location              field.String
	StartsAt              field.Time
	EndsAt                field.Time
	ParticipantLimit      field.Int64
	ParticipationStartsAt field.Time
	ParticipationEndsAt   field.Time
	Visibility            field.String
	AdminCode             field.String
	ExpiresAt             field.Time
	ParticipantCount      field.Int64
	Participations        eventHasManyParticipations

	fieldMap map[string]field.Expr
}

func (e event) Table(newTableName string) *event {
	e.eventDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e event) As(alias string) *event {
	e.eventDo.DO = *(e.eventDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *event) updateTableName(table string) *event {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewField(table, "id")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")
	e.Name = field.NewString(table, "name")
	e.Description = field.NewString(table, "description")
	e.Location = field.NewString(table, "location")
	e.StartsAt = field.NewTime(table, "starts_at")
	e.EndsAt = field.NewTime(table, "ends_at")
	e.ParticipantLimit = field.NewInt64(table, "participant_limit")
	e.ParticipationStartsAt = field.NewTime(table, "participation_starts_at")
	e.ParticipationEndsAt = field.NewTime(table, "participation_ends_at")
	e.Visibility = field.NewString(table, "visibility")
	e.AdminCode = field.NewString(table, "admin_code")
	e.ExpiresAt = field.NewTime(table, "expires_at")
	e.ParticipantCount = field.NewInt64(table, "participant_count")

	e.fillFieldMap()

	return e
}

func (e *event) WithContext(ctx context.Context) *eventDo { return e.eventDo.WithContext(ctx) }

func (e event) TableName() string { return e.eventDo.TableName() }

func (e event) Alias() string { return e.eventDo.Alias() }

func (e event) Columns(cols ...field.Expr) gen.Columns { return e.eventDo.Columns(cols...) }

func (e *event) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *event) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 17)
	e.fieldMap["id"] = e.ID
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
	e.fieldMap["name"] = e.Name
	e.fieldMap["description"] = e.Description
	e.fieldMap["location"] = e.Location
	e.fieldMap["starts_at"] = e.StartsAt
	e.fieldMap["ends_at"] = e.EndsAt
	e.fieldMap["participant_limit"] = e.ParticipantLimit
	e.fieldMap["participation_starts_at"] = e.ParticipationStartsAt
	e.fieldMap["participation_ends_at"] = e.ParticipationEndsAt
	e.fieldMap["visibility"] = e.Visibility
	e.fieldMap["admin_code"] = e.AdminCode
	e.fieldMap["expires_at"] = e.ExpiresAt
	e.fieldMap["participant_count"] = e.ParticipantCount

}

func (e event) clone(db *gorm.DB) event {
	e.eventDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e event) replaceDB(db *gorm.DB) event {
	e.eventDo.ReplaceDB(db)
	return e
}

type eventHasManyParticipations struct {
	db *gorm.DB

	field.RelationField
}

func (a eventHasManyParticipations) Where(conds ...field.Expr) *eventHasManyParticipations {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a eventHasManyParticipations) WithContext(ctx context.Context) *eventHasManyParticipations {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a eventHasManyParticipations) Session(session *gorm.Session) *eventHasManyParticipations {
	a.db = a.db.Session(session)
	return &a
}

func (a eventHasManyParticipations) Model(m *model.Event) *eventHasManyParticipationsTx {
	return &eventHasManyParticipationsTx{a.db.Model(m).Association(a.Name())}
}

type eventHasManyParticipationsTx struct{ tx *gorm.Association }

func (a eventHasManyParticipationsTx) Find() (result []*model.Participation, err error) {
	return result, a.tx.Find(&result)
}

func (a eventHasManyParticipationsTx) Append(values ...*model.Participation) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a eventHasManyParticipationsTx) Replace(values ...*model.Participation) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a eventHasManyParticipationsTx) Delete(values ...*model.Participation) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a eventHasManyParticipationsTx) Clear() error {
	return a.tx.Clear()
}

func (a eventHasManyParticipationsTx) Count() int64 {
	return a.tx.Count()
}

type eventDo struct{ gen.DO }

func (e eventDo) Debug() *eventDo {
	return e.withDO(e.DO.Debug())
}

func (e eventDo) WithContext(ctx context.Context) *eventDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e eventDo) ReadDB() *eventDo {
	return e.Clauses(dbresolver.Read)
}

func (e eventDo) WriteDB() *eventDo {
	return e.Clauses(dbresolver.Write)
}

func (e eventDo) Session(config *gorm.Session) *eventDo {
	return e.withDO(e.DO.Session(config))
}

func (e eventDo) Clauses(conds ...clause.Expression) *eventDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e eventDo) Returning(value interface{}, columns ...string) *eventDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e eventDo) Not(conds ...gen.Condition) *eventDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e eventDo) Or(conds ...gen.Condition) *eventDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e eventDo) Select(conds ...field.Expr) *eventDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e eventDo) Where(conds ...gen.Condition) *eventDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e eventDo) Order(conds ...field.Expr) *eventDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e eventDo) Distinct(cols ...field.Expr) *eventDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e eventDo) Omit(cols ...field.Expr) *eventDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e eventDo) Join(table schema.Tabler, on ...field.Expr) *eventDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e eventDo) LeftJoin(table schema.Tabler, on ...field.Expr) *eventDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e eventDo) RightJoin(table schema.Tabler, on ...field.Expr) *eventDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e eventDo) Group(cols ...field.Expr) *eventDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e eventDo) Having(conds ...gen.Condition) *eventDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e eventDo) Limit(limit int) *eventDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e eventDo) Offset(offset int) *eventDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e eventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *eventDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e eventDo) Unscoped() *eventDo {
	return e.withDO(e.DO.Unscoped())
}

func (e eventDo) Create(values ...*model.Event) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e eventDo) CreateInBatches(values []*model.Event, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e eventDo) Save(values ...*model.Event) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e eventDo) First() (*model.Event, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Event), nil
	}
}

func (e eventDo) Take() (*model.Event, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Event), nil
	}
}

func (e eventDo) Last() (*model.Event, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Event), nil
	}
}

func (e eventDo) Find() ([]*model.Event, error) {
	result, err := e.DO.Find()
	return result.([]*model.Event), err
}

func (e eventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Event, err error) {
	buf := make([]*model.Event, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e eventDo) FindInBatches(result *[]*model.Event, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e eventDo) Attrs(attrs ...field.AssignExpr) *eventDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e eventDo) Assign(attrs ...field.AssignExpr) *eventDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e eventDo) Joins(fields ...field.RelationField) *eventDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e eventDo) Preload(fields ...field.RelationField) *eventDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e eventDo) FirstOrInit() (*model.Event, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Event), nil
	}
}

func (e eventDo) FirstOrCreate() (*model.Event, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Event), nil
	}
}

func (e eventDo) FindByPage(offset int, limit int) (result []*model.Event, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e eventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e eventDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e eventDo) Delete(models ...*model.Event) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *eventDo) withDO(do gen.Dao) *eventDo {
	e.DO = *do.(*gen.DO)
	return e
}
